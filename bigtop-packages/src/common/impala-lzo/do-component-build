#!/bin/bash

set -ex

export IMPALA_LZO_IMPALA_REF=origin/cdh5-2.12.0_5.16.2
export DISABLE_CCACHE=1

if [ -z "$GIT_REPO" ]; then
    if [ -n "$NATIVE_BUILD" ]; then
        if [ $CAULDRON_BUILD ]; then
            # do-component-build is invoked two times, the 2nd time when GIT_REPO is undefined and NATIVE_BUILD
            # is. During the second pass PACKAGE_VERSION is not defined however. We need assume the impala version
            # is the same as the impala-lzo version, which should hold true in a CAULDRON build
            PACKAGE_VERSION=$(pwd | sed 's/.*impala-lzo-\(.*\)/\1/')
            if [ -z "${DEB_BUILD_ARCH}" ]; then
                PACK_TYPE=rpm
            else
                PACK_TYPE=deb
            fi

            # copy the impala files since they are write protected, and gen_build_version.py requires 
            # read write access
            cp -r  ${CAULDRON_ARTIFACTS}/local-impala-${PACK_TYPE}/output/cdh*/impala/impala-${PACKAGE_VERSION} impala
            ./build.sh RELEASE `pwd`/impala `pwd`/impala/toolchain
        else
            export LLVM_HOME=$TOOLCHAIN_HOME/llvm-3.3
            export IMPALA_LZO=`pwd`

            export IMPALA_HOME=$IMPALA_LZO/Impala
            export HADOOP_LZO=$IMPALA_LZO/hadoop-lzo

            if [ -z "${WORKSPACE}" ]; then
                WORKSPACE=~/impala-lzo-repos
                DELETE_WORKSPACE=true
            fi

            mkdir -p $WORKSPACE

            if [ ! -e "$IMPALA_HOME" ]; then
                export IMPALA_HOME=$WORKSPACE/Impala
                (cd $WORKSPACE && git clone git://github.infra.cloudera.com/CDH/Impala.git)
                (cd $IMPALA_HOME && git checkout ${IMPALA_LZO_IMPALA_REF})
            fi

            (cd $IMPALA_HOME && \
                . bin/impala-config.sh && \
                ./buildall.sh -release -noclean -notests -skiptests)

            if [ -n "${DELETE_WORKSPACE}" ]; then
                rm -r ${WORKSPACE}
            fi
        fi

    fi
else # GIT_REPO is set, this infers that it is the first invocation tarball the files to build
    if [ ${CAULDRON_BUILD} ]; then
        echo CAULDRON_BUILD do nothing during the 1st invocation
    else
        export IMPALA_HOME=Impala
        export HADOOP_LZO=hadoop-lzo

        export IMPALA_BRANCH=$(echo ${IMPALA_LZO_IMPALA_REF}|sed -e 's/origin\///')
        [ -e "$IMPALA_HOME" ] && rm -rf $IMPALA_HOME
        mkdir -p $IMPALA_HOME
        [ -e "${IMPALA_BRANCH}.tar.gz" ] && rm -f ${IMPALA_BRANCH}.tar.gz
        wget -nv https://github.infra.cloudera.com/CDH/Impala/archive/${IMPALA_BRANCH}.tar.gz -O ${IMPALA_BRANCH}.tar.gz
        tar -xz --strip-components 1 -f ${IMPALA_BRANCH}.tar.gz -C ${IMPALA_HOME}
        find ${IMPALA_HOME} -name .gitignore -exec rm -f {} \;
        rm -f ${IMPALA_BRANCH}.tar.gz

        export IMPALA_LZO_HADOOP_LZO_REF=origin/cdh5-0.4.15_5.16.2
        export HADOOP_LZO_BRANCH=$(echo ${IMPALA_LZO_HADOOP_LZO_REF}|sed -e 's/origin\///')
        [ -e "$HADOOP_LZO" ] && rm -rf $HADOOP_LZO
        mkdir -p $HADOOP_LZO
        [ -e "${HADOOP_LZO_BRANCH}.tar.gz" ] && rm -f ${HADOOP_LZO_BRANCH}.tar.gz
        wget -nv https://github.infra.cloudera.com/CDH/hadoop-lzo/archive/${HADOOP_LZO_BRANCH}.tar.gz \
        -O ${HADOOP_LZO_BRANCH}.tar.gz
        tar -xz --strip-components 1 -f ${HADOOP_LZO_BRANCH}.tar.gz -C ${HADOOP_LZO}
        find ${HADOOP_LZO} -name .gitignore -exec rm -f {} \;
        rm -f ${HADOOP_LZO_BRANCH}.tar.gz
    fi

    git init
    git add .
    git commit -a -m "Temporary commit for tarball"
    mkdir -p build
    git archive --prefix=impala-lzo-${FULL_VERSION}/ --format=tar HEAD |gzip > build/impala-lzo-${FULL_VERSION}.tar.gz
fi
